stages:
  - build
  - package
  - staging


variables:
  IMG_BASE: "${CI_REGISTRY_USER}/cande"
  EUREKA_URI: "http://eureka-server:8761/eureka/"
  TZ: "Europe/Paris"
  SPRING_PROFILES_ACTIVE: docker


.package-opts:
  image: docker:latest
  services:
    - name: docker:dind
      alias: thedockerhost
  variables:
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
    DOCKER_HOST: "tcp://thedockerhost:2375/"
    DOCKER_DRIVER: overlay2
    # highly secure empty-string cert
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin
  script:
    - docker image build -t "${IMG_BASE}-${SERVICE_NAME}:${CI_COMMIT_SHA}" -t "${IMG_BASE}-${SERVICE_NAME}:latest" --build-arg SERVICE_NAME="${SERVICE_NAME}" --build-arg EUREKA_URI="${EUREKA_URI}" --build-arg TZ="${TZ}" --build-arg SPRING_PROFILES_ACTIVE="${SPRING_PROFILES_ACTIVE}" .
  after_script:
    - docker push "${IMG_BASE}-${SERVICE_NAME}:${CI_COMMIT_SHA}"
    - docker push "${IMG_BASE}-${SERVICE_NAME}:latest"
    - docker logout
  only:
    - chore/docker


job:build:
  stage: build
  image: maven:3.8.3-amazoncorretto-17
  variables:
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Djansi.force=true"
    #  -Dmaven.repo.local=.m2/repository
    MAVEN_CLI_OPTS: "--errors --fail-at-end --show-version -Dstyle.color=always"
  script:
    - mvn ${MAVEN_CLI_OPTS} package -DskipTests
  after_script:
    - mkdir -p "${CI_PROJECT_DIR}/artifacts"
    - mv ${CI_PROJECT_DIR}/services/infra/eureka-server/target/eureka-server-1.0-SNAPSHOT.jar "${CI_PROJECT_DIR}/artifacts/eureka-server-1.0-SNAPSHOT.jar"
    - mv ${CI_PROJECT_DIR}/services/infra/gateway/target/gateway-1.0-SNAPSHOT.jar "${CI_PROJECT_DIR}/artifacts/gateway-1.0-SNAPSHOT.jar"
    - mv ${CI_PROJECT_DIR}/services/core/authentication/target/authentication-1.0-SNAPSHOT.jar "${CI_PROJECT_DIR}/artifacts/authentication-1.0-SNAPSHOT.jar"
    - mv ${CI_PROJECT_DIR}/services/core/customer/target/customer-1.0-SNAPSHOT-exec.jar "${CI_PROJECT_DIR}/artifacts/customer-1.0-SNAPSHOT.jar"
    - mv ${CI_PROJECT_DIR}/services/core/notification/target/notification-1.0-SNAPSHOT.jar "${CI_PROJECT_DIR}/artifacts/notification-1.0-SNAPSHOT.jar"
    - mv ${CI_PROJECT_DIR}/services/core/order/target/order-1.0-SNAPSHOT.jar "${CI_PROJECT_DIR}/artifacts/order-1.0-SNAPSHOT.jar"
    - mv ${CI_PROJECT_DIR}/services/core/product/target/product-1.0-SNAPSHOT.jar "${CI_PROJECT_DIR}/artifacts/product-1.0-SNAPSHOT.jar"
    - mv ${CI_PROJECT_DIR}/services/core/store/target/store-1.0-SNAPSHOT-exec.jar "${CI_PROJECT_DIR}/artifacts/store-1.0-SNAPSHOT.jar"
    - mv ${CI_PROJECT_DIR}/services/back-office/customisation/target/customisation-1.0-SNAPSHOT.jar "${CI_PROJECT_DIR}/artifacts/customisation-1.0-SNAPSHOT.jar"
    - mv ${CI_PROJECT_DIR}/services/back-office/subscription/target/subscription-1.0-SNAPSHOT.jar "${CI_PROJECT_DIR}/artifacts/subscription-1.0-SNAPSHOT.jar"
    - mv ${CI_PROJECT_DIR}/services/back-office/ticket/target/ticket-1.0-SNAPSHOT.jar "${CI_PROJECT_DIR}/artifacts/ticket-1.0-SNAPSHOT.jar"
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/artifacts/eureka-server-1.0-SNAPSHOT.jar
      - ${CI_PROJECT_DIR}/artifacts/gateway-1.0-SNAPSHOT.jar
      - ${CI_PROJECT_DIR}/artifacts/authentication-1.0-SNAPSHOT.jar
      - ${CI_PROJECT_DIR}/artifacts/customer-1.0-SNAPSHOT.jar
      - ${CI_PROJECT_DIR}/artifacts/notification-1.0-SNAPSHOT.jar
      - ${CI_PROJECT_DIR}/artifacts/order-1.0-SNAPSHOT.jar
      - ${CI_PROJECT_DIR}/artifacts/product-1.0-SNAPSHOT.jar
      - ${CI_PROJECT_DIR}/artifacts/store-1.0-SNAPSHOT.jar
      - ${CI_PROJECT_DIR}/artifacts/customisation-1.0-SNAPSHOT.jar
      - ${CI_PROJECT_DIR}/artifacts/subscription-1.0-SNAPSHOT.jar
      - ${CI_PROJECT_DIR}/artifacts/ticket-1.0-SNAPSHOT.jar
  only:
    -  chore/docker
  # cache:
  #   - key: "${CI_BUILD_REF_NAME}"
  #     paths:
  #       - ".m2/repository"


# ### INFRA
# job:package:eureka-server:
#   stage: package
#   extends: .package-opts
#   variables:
#     SERVICE_NAME: eureka-server
#   needs:
#     - job:build
#   dependencies:
#     - job:build

# job:package:gateway:
#   stage: package
#   extends: .package-opts
#   variables:
#     SERVICE_NAME: gateway
#   needs:
#     - job:build
#   dependencies:
#     - job:build

# job:package:db:
#   stage: package
#   extends: .package-opts
#   variables:
#     SERVICE_NAME: db
#     PGDATA: /data/postgres
#     TZ: ${TZ}
#     PGTZ: ${TZ}
#   script:
#     - docker image build -t "${IMG_BASE}-${SERVICE_NAME}:${CI_COMMIT_SHA}" -t "${IMG_BASE}-${SERVICE_NAME}:latest" --build-arg PGTZ=${PGTZ} --build-arg TZ=${TZ} --build-arg PGDATA=${PGDATA} ./db

# ### CORE
# job:package:authentication:
#   stage: package
#   extends: .package-opts
#   variables:
#     SERVICE_NAME: authentication
#   needs:
#     - job:build
#   dependencies:
#     - job:build

# job:package:customer:
#   stage: package
#   extends: .package-opts
#   variables:
#     SERVICE_NAME: customer
#   needs:
#     - job:build
#   dependencies:
#     - job:build

# job:package:notification:
#   stage: package
#   extends: .package-opts
#   variables:
#     SERVICE_NAME: notification
#   needs:
#     - job:build
#   dependencies:
#     - job:build

# job:package:order:
#   stage: package
#   extends: .package-opts
#   variables:
#     SERVICE_NAME: order
#   needs:
#     - job:build
#   dependencies:
#     - job:build

# job:package:product:
#   stage: package
#   extends: .package-opts
#   variables:
#     SERVICE_NAME: product
#   needs:
#     - job:build
#   dependencies:
#     - job:build

# job:package:store:
#   stage: package
#   extends: .package-opts
#   variables:
#     SERVICE_NAME: store
#   needs:
#     - job:build
#   dependencies:
#     - job:build

# ### BACK-OFFICE
# job:package:customisation:
#   stage: package
#   extends: .package-opts
#   variables:
#     SERVICE_NAME: customisation
#   needs:
#     - job:build
#   dependencies:
#     - job:build

# job:package:subscription:
#   stage: package
#   extends: .package-opts
#   variables:
#     SERVICE_NAME: subscription
#   needs:
#     - job:build
#   dependencies:
#     - job:build

# job:package:ticket:
#   stage: package
#   extends: .package-opts
#   variables:
#     SERVICE_NAME: ticket
#   needs:
#     - job:build
#   dependencies:
#     - job:build

# ### INTEGRATION
# job:package:integration:
#   stage: package
#   extends: .package-opts
#   variables:
#     SERVICE_NAME: integration
#   script:
#     - docker image build -t "${IMG_BASE}-${SERVICE_NAME}:${CI_COMMIT_SHA}" -t "${IMG_BASE}-${SERVICE_NAME}:latest" --build-arg STAGE=staging ./integration

job:deploy:staging:
  stage: staging
  image: !reference [.package-opts, image]
  services: !reference [.package-opts, services]
  variables:
    STAGE: "stage"
  only:
    -  chore/docker
  script:
    - docker compose --file compose-${STAGE} up --build -d
    - cd & ./integration && python3 poller.py
  after_script:
    - docker compose --file compose-${STAGE} down
    - docker system prune -a