stages:
  - build
  - package
  - staging

variables:
  # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
  DOCKER_HOST: "tcp://thedockerhost:2375/"
  DOCKER_DRIVER: overlay2
  # highly secure empty-string cert
  DOCKER_TLS_CERTDIR: ""
  IMG_BASE: "${CI_REGISTRY_USER}/cande"
  EUREKA_URI: "http://eureka-server:8761/eureka/"
  TZ: "Europe/Paris"
  SPRING_PROFILES_ACTIVE: docker

.maven-opts:
  image: maven:3.8.3-amazoncorretto-17
  cache:
    key: "${CI_BUILD_REF_NAME}"
    paths:
      - ".m2"
  variables:
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Djansi.force=true"
    MAVEN_CLI_OPTS: "-Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository --errors --fail-at-end --show-version -Dstyle.color=always"
  artifacts:
    paths:
      - "**/target/*.jar"

.package-opts:
  image: docker:latest
  services:
    - name: docker:dind
      alias: thedockerhost
  script:
    - docker image build -t "${IMG_BASE}-${SERVICE_NAME}:${CI_COMMIT_SHA}" -t "${IMG_BASE}-${SERVICE_NAME}:latest" --build-arg SERVICE_NAME="${SERVICE_NAME}" --build-arg EUREKA_URI="${EUREKA_URI}" --build-arg TZ="${TZ}" --build-arg SPRING_PROFILES_ACTIVE="${SPRING_PROFILES_ACTIVE}" .
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin
    - docker push "${IMG_BASE}-${SERVICE_NAME}:${CI_COMMIT_SHA}"
    - docker push "${IMG_BASE}-${SERVICE_NAME}:latest"
  only:
    - chore/docker
  needs:
    - job:build
  dependencies:
    - job:build

job:build:
  stage: build
  extends: .maven-opts
  script:
    - mvn $MAVEN_CLI_OPTS package -DskipTests
  only:
    -  chore/docker

job:build:eureka-server:
  stage: build
  script: 
    - cp ${CI_PROJECT_DIR}/services/infra/eureka-server/target/eureka-server-1.0-SNAPSHOT.jar ./eureka-server-1.0-SNAPSHOT.jar
  dependencies:
    - job:build
  needs:
    - job:build
  only:
    -  chore/docker

# INFRA
job:package:eureka-server:
  stage: package
  image: docker:latest
  services:
    - name: docker:dind
      alias: thedockerhost
  variables:
    SERVICE_NAME: eureka-server
  script: 
    - docker image build -t "${IMG_BASE}-${SERVICE_NAME}:${CI_COMMIT_SHA}" -t "${IMG_BASE}-${SERVICE_NAME}:latest" --build-arg SERVICE_NAME="${SERVICE_NAME}" --build-arg EUREKA_URI="${EUREKA_URI}" --build-arg TZ="${TZ}" --build-arg SPRING_PROFILES_ACTIVE="${SPRING_PROFILES_ACTIVE}" .
  only:
    -  chore/docker
  dependencies: 
    - job:build:eureka-server

# job:package:gateway:
#   stage: package
#   image: !reference [.package-opts, image]
#   services: !reference [.package-opts, services]
#   variables:
#     SERVICE_NAME: gateway
#   script: 
#     - cp ${CI_PROJECT_DIR}/services/infra/gateway/target/gateway-1.0-SNAPSHOT.jar ./gateway-1.0-SNAPSHOT.jar
#     - !reference [.package-opts, script]
#   only: !reference [.package-opts, only]
#   dependencies: !reference [.package-opts, dependencies]
#   needs: !reference [.package-opts, needs]

# job:package:db:
#   stage: package
#   image: !reference [.package-opts, image]
#   services: !reference [.package-opts, services]
#   variables:
#     SERVICE_NAME: db
#     PGDATA: /data/postgres
#     TZ: ${TZ}
#     PGTZ: ${TZ}
#   script:
#     - docker image build -t "${IMG_BASE}-${SERVICE_NAME}:${CI_COMMIT_SHA}" -t "${IMG_BASE}-${SERVICE_NAME}:latest" ./db
#     - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin
#     - docker push "${IMG_BASE}-${SERVICE_NAME}:${CI_COMMIT_SHA}"
#     - docker push "${IMG_BASE}-${SERVICE_NAME}:latest"
#   only: !reference [.package-opts, only]

# # CORE
# job:package:authentication:
#   stage: package
#   image: !reference [.package-opts, image]
#   services: !reference [.package-opts, services]
#   variables:
#     SERVICE_NAME: authentication
#   script:
#     - cp ${CI_PROJECT_DIR}/services/core/authentication/target/authentication-1.0-SNAPSHOT.jar ./authentication-1.0-SNAPSHOT.jar
#     - !reference [.package-opts, script]
#   only: !reference [.package-opts, only]
#   dependencies: !reference [.package-opts, dependencies]
#   needs: !reference [.package-opts, needs]

# job:package:customer:
#   stage: package
#   image: !reference [.package-opts, image]
#   services: !reference [.package-opts, services]
#   variables:
#     SERVICE_NAME: customer
#   script:
#     - cp ${CI_PROJECT_DIR}/services/core/customer/target/customer-1.0-SNAPSHOT-exec.jar ./customer-1.0-SNAPSHOT.jar
#     - !reference [.package-opts, script]
#   only: !reference [.package-opts, only]
#   dependencies: !reference [.package-opts, dependencies]
#   needs: !reference [.package-opts, needs]

# job:package:notification:
#   stage: package
#   image: !reference [.package-opts, image]
#   services: !reference [.package-opts, services]
#   variables:
#     SERVICE_NAME: notification
#   script:
#     - cp ${CI_PROJECT_DIR}/services/core/notification/target/notification-1.0-SNAPSHOT.jar ./notification-1.0-SNAPSHOT.jar
#     - !reference [.package-opts, script]
#   only: !reference [.package-opts, only]
#   dependencies: !reference [.package-opts, dependencies]
#   needs: !reference [.package-opts, needs]

# job:package:order:
#   stage: package
#   image: !reference [.package-opts, image]
#   services: !reference [.package-opts, services]
#   variables:
#     SERVICE_NAME: order
#   script:
#     - cp ${CI_PROJECT_DIR}/services/core/order/target/order-1.0-SNAPSHOT.jar ./order-1.0-SNAPSHOT.jar
#     - !reference [.package-opts, script]
#   only: !reference [.package-opts, only]
#   dependencies: !reference [.package-opts, dependencies]
#   needs: !reference [.package-opts, needs]

# job:package:product:
#   stage: package
#   image: !reference [.package-opts, image]
#   services: !reference [.package-opts, services]
#   variables:
#     SERVICE_NAME: product
#   script:
#     - cp ${CI_PROJECT_DIR}/services/core/product/target/product-1.0-SNAPSHOT.jar ./product-1.0-SNAPSHOT.jar
#     - !reference [.package-opts, script]
#   only: !reference [.package-opts, only]
#   dependencies: !reference [.package-opts, dependencies]
#   needs: !reference [.package-opts, needs]

# job:package:store:
#   stage: package
#   image: !reference [.package-opts, image]
#   services: !reference [.package-opts, services]
#   variables:
#     SERVICE_NAME: store
#   script:
#     - cp ${CI_PROJECT_DIR}/services/core/store/target/store-1.0-SNAPSHOT-exec.jar ./store-1.0-SNAPSHOT.jar
#     - !reference [.package-opts, script]
#   only: !reference [.package-opts, only]
#   dependencies: !reference [.package-opts, dependencies]
#   needs: !reference [.package-opts, needs]

# # BACK-OFFICE
# job:package:customisation:
#   stage: package
#   image: !reference [.package-opts, image]
#   services: !reference [.package-opts, services]
#   variables:
#     SERVICE_NAME: customisation
#   script:
#     - cp ${CI_PROJECT_DIR}/services/back-office/customisation/target/customisation-1.0-SNAPSHOT.jar ./customisation-1.0-SNAPSHOT.jar
#     - !reference [.package-opts, script]
#   only: !reference [.package-opts, only]
#   dependencies: !reference [.package-opts, dependencies]
#   needs: !reference [.package-opts, needs]

# job:package:subscription:
#   stage: package
#   image: !reference [.package-opts, image]
#   services: !reference [.package-opts, services]
#   variables:
#     SERVICE_NAME: subscription
#   script:
#     - cp ${CI_PROJECT_DIR}/services/back-office/subscription/target/subscription-1.0-SNAPSHOT.jar ./subscription-1.0-SNAPSHOT.jar
#     - !reference [.package-opts, script]
#   only: !reference [.package-opts, only]
#   dependencies: !reference [.package-opts, dependencies]
#   needs: !reference [.package-opts, needs]

# job:package:ticket:
#   stage: package
#   image: !reference [.package-opts, image]
#   services: !reference [.package-opts, services]
#   variables:
#     SERVICE_NAME: ticket
#   script:
#     - cp ${CI_PROJECT_DIR}/services/back-office/ticket/target/ticket-1.0-SNAPSHOT.jar ./ticket-1.0-SNAPSHOT.jar
#     - !reference [.package-opts, script]
#   only: !reference [.package-opts, only]
#   dependencies: !reference [.package-opts, dependencies]
#   needs: !reference [.package-opts, needs]

# # INTEGRATION
# job:package:integration:
#   stage: package
#   image: !reference [.package-opts, image]
#   services: !reference [.package-opts, services]
#   variables:
#     SERVICE_NAME: integration
#   script:
#     - docker image build -t "${IMG_BASE}-${SERVICE_NAME}:${CI_COMMIT_SHA}" -t "${IMG_BASE}-${SERVICE_NAME}:latest" --build-arg STAGE=staging ./integration
#     - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin
#     - docker push "${IMG_BASE}-${SERVICE_NAME}:${CI_COMMIT_SHA}"
#     - docker push "${IMG_BASE}-${SERVICE_NAME}:latest"
#   only: !reference [.package-opts, only]

# dependencies -> need + accès à l'artifact produits par les jobs déclarés, need implicite, tous les artifacts sont passés par défaut aux jobs suivants
# need -> attend que le job déclaré soit terminé, utiliser en combinaison avec dependencies: null pour ignorer les artifacts, amélioration du build time
# https://docs.gitlab.cn/14.0/ee/ci/yaml/README.html
# dependencies	Restrict which artifacts are passed to a specific job by providing a list of jobs to fetch artifacts from.
# needs	Execute jobs earlier than the stage ordering.
job:package:publish:
  stage: package
  image: docker:latest
  services:
    - name: docker:dind
      alias: thedockerhost
  script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin
    - docker push "${IMG_BASE}-eureka-server:${CI_COMMIT_SHA}"
    - docker push "${IMG_BASE}-eureka-server:latest"
  only:
    - chore/docker
  dependencies:
    - job:package:eureka-server

###
# job:deploy:staging:
#   stage: staging
#   image: !reference [.package-opts, image]
#   services: !reference [.package-opts, services]
#   variables:
#     STAGE: "-stage"
#   only: !reference [.package-opts, only]
#   dependencies: !reference [.package-opts, dependencies]
#   needs: !reference [.package-opts, needs]